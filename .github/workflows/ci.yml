name: document CI

on:
  push:
    branches: [  feature/deviceinfo  ]

env:  # 해당 Action Workflow(ci-containerize-with-runner)가 사용할 전역 변수
  COMMITER_NAME: iptv_develop2
  AWS_REGION: ap-northeast-2
  SHR_ROLE_NAME: dev-role-share-iptv-relengd-eks-self_hosted_runner # << IAM Role for IRSA setting
  APP_NAME: rabbi
  LATEST_TAG: 1.0
  TARGET_OWNER: ${{ github.repository_owner }}
  TARGET_REPO: helm-charts
  TARGET_BRANCH: main
  CLONE_PATH: helm

jobs:
  adoc_build:
    runs-on: [ 'self-hosted', 'shared-eks', 'repo' ]
    continue-on-error: false
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get build container
        id: adocbuild
        uses: tonynv/asciidoctor-action@master
        with:
          program: "asciidoctor --backend=html5 -o index.html index.adoc"

      - name: Dependency > Install AWS CLI 2
        run: |
          mkdir temp && cd temp && curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip && sudo ./aws/install
          echo "Installed AWS CLI Version: $(aws --version)"
      - name: Dependency > Configure for AWS CLI 2 > Assume Role - using ServiceAccount
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: rabbi-${{ env.THIS_BRANCH }}
          role-duration-seconds: 3600
          role-to-assume: ${{ env.SHR_ROLE_NAME }}
          web-identity-token-file: /var/run/secrets/eks.amazonaws.com/serviceaccount/token

      - name: Build > Login Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build docker image
        run: |
          docker build -f Dockerfile -t ${{ steps.ecr-login.outputs.registry }}/${{ env.APP_NAME }}:${{ env.LATEST_TAG }} .

      - name: Push > Upload to ECR
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.APP_NAME }}:${{ env.LATEST_TAG }}
      - name: docker rmi
        run: |
          docker rmi ${{ steps.ecr-login.outputs.registry }}/${{ env.APP_NAME }}:${{ env.LATEST_TAG }}
      - name: Prepare > Get GitHub Token from SecretsManager
        id: get-secret
        run: |
          export GITHUB_PAT=$(aws secretsmanager get-secret-value \
                                --secret-id='github/dev-eks-share-iptv-relengd-eks/self-hosted-runner' \
                                --output json | jq '.SecretString' -r | jq '."tw-pat"' | tr -d '"')
          # Check
          [ -z ${GITHUB_PAT} ] && echo "'GITHUB_PAT' has not been set" && exit 1
          echo "::set-output name=GITHUB_PAT::${GITHUB_PAT}"
      - name: Prepare > Pull Target Repository & Branch Switch
        uses: actions/checkout@v2
        with:
          path: ${{ env.CLONE_PATH }}
          repository: ${{ env.TARGET_OWNER }}/${{ env.TARGET_REPO }}
          ref: ${{ env.TARGET_BRANCH }}
          token: ${{ steps.get-secret.outputs.GITHUB_PAT }}

      - name: Prepare > Replace Version Tag Data (using yq)
        run: |
          sudo add-apt-repository ppa:rmescandon/yq && sudo apt install yq -y
          UPDATED_VALUES_FILE="${{ env.CLONE_PATH }}/helm-charts/app-charts/${{ env.APP_NAME }}/values.yaml"
          yq eval -i '.image.version = "${{ env.LATEST_TAG }}"' ${UPDATED_VALUES_FILE}
      - name: Push commit to Chart Repository
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ steps.get-secret.outputs.GITHUB_PAT }}
          COMMITER_NAME: ci.${{ env.APP_NAME }}
        with:
          # Source Setting
          source-directory: ${{ env.CLONE_PATH }}
          # Target Setting
          destination-github-username: ${{ env.TARGET_OWNER }}
          destination-repository-name: ${{ env.TARGET_REPO }}
          target-branch: ${{ env.TARGET_BRANCH }}
          # Commit Setting
          user-name:  ${{ env.COMMITER_NAME }}
          user-email: ${{ env.COMMITER_NAME }}@lguplus.co.kr