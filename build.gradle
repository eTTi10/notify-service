plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.adarshr.test-logger' version '3.0.0'
    id "org.sonarqube" version "3.3"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id 'com.epages.restdocs-api-spec' version '0.16.0'

}

ext {
    snippetsDir = file('build/generated-snippets')
}

bootJar { enabled = false }


allprojects {
    repositories {
        mavenCentral()
    }
}

sonarqube{
    properties {
        property 'sonar.host.url', 'http://a3b3246d677004387a382e258f515715-86a3a782fd055d12.elb.ap-northeast-2.amazonaws.com'
        property 'sonar.login','411e89fdfa7f856077b41c03ff6bfcefcff1239a'
        property 'sonar.projectKey','notify'
        property 'sonar.sources', 'src'
        property 'sonar.language', 'java'
        property 'sonar.coverage.exclusions', 'subprojects/boot/**, **/data/**, **/config/**, **/filter/**, **/interceptor/**, **/advice/**, **/exception/**'
        property 'sonar.exclusions', '**/test/**,  **/*Doc*.java, **/resources/**, **/external/**'

    }
}

//bootJar { enabled = false }

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'org.asciidoctor.jvm.convert'

    group = 'com.lguplus.fleta'
    version = '1.1.0'
    sourceCompatibility = '11'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web:2.5.6'
        implementation 'org.springframework.boot:spring-boot-starter-aop:2.5.5'
        implementation 'net.rakugakibox.util:yaml-resource-bundle:1.1'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        implementation "io.springfox:springfox-swagger2:2.9.2"
        implementation "io.springfox:springfox-swagger-ui:2.9.2"
        implementation 'org.apache.commons:commons-lang3:3.11'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.5'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        //MapStruct
        compileOnly 'org.mapstruct:mapstruct:1.4.2.Final'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

        //####################### MMS 모듈관련 #########################
        // https://mvnrepository.com/artifact/org.jdom/jdom
        // 관련) import org.jdom2.*, Format
        implementation group: 'org.jdom', name: 'jdom', version: '2.0.2'

        // https://mvnrepository.com/artifact/org.jvnet.mimepull/mimepull
        // 관련) MIMEConfig, import org.jvnet.mimepull.*
        implementation group: 'org.jvnet.mimepull', name: 'mimepull', version: '1.9.4'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        //open api
        implementation 'org.springdoc:springdoc-openapi-ui:1.6.3'

    }

    jacoco {
        toolVersion = '0.8.7'

        // 테스트 결과 리포트 저장 경로 설정
        // default : "${project.reporting.baseDir}/jacoco"
        //reportsDir = file("$buildDir/customJacocoReportDir")
    }

    // JaCoCo Task
    jacocoTestReport {
        reports {
            // 리포트 활성화
            html.enabled true
            xml.enabled true
            csv.enabled false

            // 리포트 저장 경로 설정
            //html.destination file("$buildDir/jacocoHtml")
            //xml.destination file("$buildDir/jacoco.xml")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "com/lguplus/fleta/advice/*",
                        "com/lguplus/fleta/config/*",
                        "com/lguplus/fleta/data/*",
                        "com/lguplus/fleta/exception/*",
                        "com/lguplus/fleta/filter/*",
                        "com/lguplus/fleta/interceptor/*",
                        "com/lguplus/fleta/provider/external/*"
                ])
            }))
        }

        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                // Jacoco Rule 활성화
                enabled = true

                // 룰 체크 단위
                element = 'CLASS' // Option: BUNDLE(default), PACKAGE, CLASS, SOURCEFILE, METHOD

                // Method 커버리지
                limit {
                    counter = 'METHOD' // Option: INSTRUCTION(default), LINE, BRANCH, CLASS, METHOD, COMPLEXITY
                    value = 'COVEREDRATIO' // Option: COVEREDRATIO(default), TOTALCOUNT, MISSEDCOUNT, COVEREDCOUNT, MISSEDRATIO
                    minimum = 1.00
                }

                // Branch 커버리지
                limit {
                    counter = 'BRANCH' // Option: INSTRUCTION(default), LINE, BRANCH, CLASS, METHOD, COMPLEXITY
                    value = 'COVEREDRATIO' // Option: COVEREDRATIO(default), TOTALCOUNT, MISSEDCOUNT, COVEREDCOUNT, MISSEDRATIO
                    minimum = 0.60
                }

                // 커버리지 체크 제외 클래스
                excludes = [
                        'com.lguplus.fleta.advice.*',
                        'com.lguplus.fleta.config.*',
                        'com.lguplus.fleta.data.*',
                        'com.lguplus.fleta.exception.*',
                        'com.lguplus.fleta.filter.*',
                        'com.lguplus.fleta.interceptor.*',
                        'com.lguplus.fleta.exhandler.*',
                        'com.lguplus.fleta.validation.*',
                        "com.lguplus.fleta.provider.external.*",
                ]
            }
        }
    }

    task testCoverage(type: Test) {
        group 'verification'
        description 'Runs the unit tests with coverage'

        dependsOn(':test',
                ':jacocoTestReport',
                ':jacocoTestCoverageVerification')

        tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
        tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
    }

    test {
        // Jacoco 실행 시, 지정한 Profile로 실행
        if (System.properties.containsKey('spring.profiles.active')) {
            String activeProfile = System.properties['spring.profiles.active']
            println "profile: $activeProfile"
            systemProperty "spring.profiles.active", activeProfile
        }
        useJUnitPlatform()
        ignoreFailures = false
        finalizedBy 'jacocoTestReport'
        afterTest { desc, result ->
            logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
        }
        outputs.dir snippetsDir
    }
    asciidoctor {
        inputs.dir snippetsDir
        dependsOn test
        sources{
            include("**/*.adoc","**/**/*.adoc")
        }

        baseDirFollowsSourceFile()
    }
//    asciidoctor.doFirst {
//        delete file('src/main/resources/static/docs')
//    }
    task copyDocument(type: Copy) {
        dependsOn asciidoctor
        from file("build/docs/asciidoc")
        into file("src/main/resources/static/docs")
    }

    build {
        dependsOn copyDocument
    }

    openapi {
        host = 'http://' + this.rootProject.name + '.up.internal'
        basePath = '/'
        title = this.rootProject.name
        description = this.description
        version = this.version
        format = 'json'
    }

    openapi3 {
        server = 'http://' + this.rootProject.name + '.up.internal'
        title = this.rootProject.name
        description = this.description
        version = this.version
        format = 'json'
    }

    postman {
        title = this.rootProject.name
        version = this.version
        baseUrl = 'http://' + rootProject.name + '.up.internal'
    }

    testlogger {
        theme 'mocha'
        showExceptions true
        showStackTraces true
        showFullStackTraces false
        showCauses true
        slowThreshold 2000
        showSummary true
        showSimpleNames false
        showPassed true
        showSkipped true
        showFailed true
        showStandardStreams false
        showPassedStandardStreams true
        showSkippedStandardStreams true
        showFailedStandardStreams true
        logLevel 'info'
    }
}

project(':boot') {
    dependencies {
        implementation project(':presentation')
        implementation project(':application')
        implementation project(':domain')
        implementation project(':infrastructure')
    }


    bootJar {
        dependsOn asciidoctor
        copy {
            from "${asciidoctor.outputDir}"
            into 'BOOT-INF/classes/static/docs'
        }
    }

    test {
        exclude '**/*'
        useJUnitPlatform()
        outputs.dir snippetsDir
    }
}

project(':presentation') {
    dependencies {
        implementation project(':application')
        implementation project(':domain')
    }
    bootJar { enabled = false }
}

project(':application') {
    dependencies {
        implementation project(':domain')
    }
    bootJar { enabled = false }
}

project(':domain') {
    dependencies {
        testImplementation project(':boot')
    }
    bootJar { enabled = false }
}

project(':infrastructure') {
    dependencies {
        implementation project(':domain')
        testImplementation project(':boot')
    }
    bootJar { enabled = false }
}

task printVersion {
    doLast {
        // println subprojects[0].version
        println project(':boot').version
    }
}
