plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.adarshr.test-logger' version '3.0.0'
    id "org.sonarqube" version "3.3"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}
apply from: "$rootDir/code-quality/allCoverage.gradle"

bootJar { enabled = false }


allprojects {
    repositories {
        mavenCentral()
    }
}



subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply from: "$rootDir/code-quality/moduleCoverage.gradle"
    apply from: "$rootDir/code-quality/checkStyle.gradle"

    group = 'com.lguplus.fleta'
    version = '1.1.0'
    sourceCompatibility = '11'

    configurations {
        asciidoctorExtensions
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    ext {
        snippetsDir = file('build/generated-snippets')
        restDocInDir = file("src/docs/asciidoc")
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web:2.5.6'
        implementation 'org.springframework.boot:spring-boot-starter-aop:2.5.5'
        implementation 'net.rakugakibox.util:yaml-resource-bundle:1.1'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
        implementation "io.springfox:springfox-swagger2:2.9.2"
        implementation "io.springfox:springfox-swagger-ui:2.9.2"
        implementation 'org.apache.commons:commons-lang3:3.11'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.5'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        //MapStruct
        compileOnly 'org.mapstruct:mapstruct:1.4.2.Final'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

        //####################### MMS 모듈관련 #########################
        // https://mvnrepository.com/artifact/org.jdom/jdom
        // 관련) import org.jdom2.*, Format
        implementation group: 'org.jdom', name: 'jdom', version: '2.0.2'

        // https://mvnrepository.com/artifact/org.jvnet.mimepull/mimepull
        // 관련) MIMEConfig, import org.jvnet.mimepull.*
        implementation group: 'org.jvnet.mimepull', name: 'mimepull', version: '1.9.4'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }


    asciidoctor {
        dependsOn test
        configurations 'asciidoctorExtensions'
        sources{
            include('**/*.adoc')
        }

        //haegol index.adoc 기준으로 맞췄습니다
        options doctype: 'book'
        attributes 'source-highlighter': 'highlightjs',
                toc                 : 'left',
                toclevels           : 4
        baseDirFollowsSourceFile()
    }

    asciidoctor.doFirst {
        delete file('src/main/resources/static/docs')
    }

    task copyDocument(type: Copy) {
        dependsOn asciidoctor
        from file("build/docs/asciidoc")
        into file("src/main/resources/static/docs")
    }

    build {
        dependsOn copyDocument
    }

}

project(':boot') {
    dependencies {
        implementation project(':presentation')
        implementation project(':application')
        implementation project(':domain')
        implementation project(':infrastructure')
    }

//    test {
//        exclude '**/*'
//        useJUnitPlatform()
//    }
}

project(':presentation') {
    dependencies {
        implementation project(':application')
        implementation project(':domain')
    }
    bootJar { enabled = false }
}

project(':application') {
    dependencies {
        implementation project(':domain')
        implementation project(':infrastructure')
    }
    bootJar { enabled = false }
    test {
        exclude '**/*'
        useJUnitPlatform()
    }
}

project(':domain') {
    dependencies {
        testImplementation project(':boot')
    }
    bootJar { enabled = false }
    test {
        exclude '**/*'
        useJUnitPlatform()
    }
}

project(':infrastructure') {
    dependencies {
        implementation project(':domain')
        testImplementation project(':boot')
    }
    bootJar { enabled = false }
    test {
        exclude '**/*'
        useJUnitPlatform()
    }
}

task printVersion {
    doLast {
        // println subprojects[0].version
        println project(':boot').version
    }
}
